test <- read_stars("land_shallow_topo_2048.tif",
RasterIO = list(nBufXSize=360, nBufYSize=180))
library(plotly)
library(tidyverse)
library(dplyr)
library(htmltools)
library(stars)
library(ggplot2)
earthquakes <- read_csv("earthquakes.csv")
degrees2radians <- function(degree) degree * pi / 180
earthquakes <- earthquakes |>
mutate(x=1.01 * cos(degrees2radians(longitude)) * cos(degrees2radians(latitude))) |>
mutate(y=1.01 * sin(degrees2radians(longitude)) * cos(degrees2radians(latitude))) |>
mutate(z=1.01 * sin(degrees2radians(latitude)))
nlat <- 360
nlon <- 180
lat <- seq(-90, 90, length.out = nlat)
lon <- seq(-180, 180, length.out = nlon)
lat <- matrix(rep(lat, nlon), nrow = nlat)
lon <- matrix(rep(lon, each = nlat), nrow = nlat)
breaks <- seq(0, 1, length.out = 10)
colors <- c(rgb(30/255, 59/255, 117/255), rgb(46/255, 68/255, 21/255), rgb(115/255,141/255,90/255),
rgb(115/255,141/255,90/255), rgb(122/255, 126/255, 75/255), rgb(122/255, 126/255, 75/255),
rgb(141/255,115/255,96/255), rgb(223/255, 197/255, 170/255), rgb(237/255,214/255,183/255),
rgb(255/255, 255/255, 255/255))
colorscale <- data.frame(breaks, colors)
empty_axis <- list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
showspikes = FALSE,
spikesides = FALSE,
title = ""
)
test <- read_stars("land_shallow_topo_2048.tif",
RasterIO = list(nBufXSize=360, nBufYSize=180))
setwd("~/Documents/GitHub/animations")
test <- read_stars("land_shallow_topo_2048.tif",
RasterIO = list(nBufXSize=360, nBufYSize=180))
test2 <- as.data.frame(test)
test2 <- test2 |>
mutate(x = as.integer(x-180)) |>
mutate(y = as.integer(y-90))
red <- test2 |>
filter(band == 1) |>
mutate(red = land_shallow_topo_2048.tif)
red <- red[-c(3,4)]
green <- test2 |>
filter(band == 2) |>
mutate(green = land_shallow_topo_2048.tif)
green <- green[-c(3,4)]
blue <- test2 |>
filter(band == 3) |>
mutate(blue = land_shallow_topo_2048.tif)
blue <- blue[-c(3,4)]
rgb <- left_join(left_join(red, green),blue)
rgb$color <- rgb(rgb$red/255,rgb$green/255,rgb$blue/255)
rgb_earth <- matrix(data=rgb$color, nrow=350, ncol = 175)
test3 <- rgb |>
mutate(x = as.integer(x)) |>
mutate(y = as.integer(y))
ggplot(test3, show.legend=FALSE)+
geom_point(aes(x=x, y=y,color=color),  show.legend=FALSE)+
scale_color_identity()
#tm_shape(test)+tm_rgb()
earthquakes <- read_csv("earthquakes.csv")
degrees2radians <- function(degree) degree * pi / 180
earthquakes <- earthquakes |>
mutate(x=1.01 * cos(degrees2radians(longitude)) * cos(degrees2radians(latitude))) |>
mutate(y=1.01 * sin(degrees2radians(longitude)) * cos(degrees2radians(latitude))) |>
mutate(z=1.01 * sin(degrees2radians(latitude)))
nlat <- 360
nlon <- 180
lat <- seq(-90, 90, length.out = nlat)
lon <- seq(-180, 180, length.out = nlon)
lat <- matrix(rep(lat, nlon), nrow = nlat)
lon <- matrix(rep(lon, each = nlat), nrow = nlat)
breaks <- seq(0, 1, length.out = 10)
colors <- c(rgb(30/255, 59/255, 117/255), rgb(46/255, 68/255, 21/255), rgb(115/255,141/255,90/255),
rgb(115/255,141/255,90/255), rgb(122/255, 126/255, 75/255), rgb(122/255, 126/255, 75/255),
rgb(141/255,115/255,96/255), rgb(223/255, 197/255, 170/255), rgb(237/255,214/255,183/255),
rgb(255/255, 255/255, 255/255))
colorscale <- data.frame(breaks, colors)
empty_axis <- list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
showspikes = FALSE,
spikesides = FALSE,
title = ""
)
globe <- plot_ly(height = 600) |>
add_sf(
data = sf::st_as_sf(maps::map("world", plot = FALSE, fill = TRUE)),
x = ~ 1.001 * cos(degrees2radians(x)) * cos(degrees2radians(y)),
y = ~ 1.001 * sin(degrees2radians(x)) * cos(degrees2radians(y)),
z = ~ 1.001 * sin(degrees2radians(y)),
color = I("black"), size = I(1)
#hoverinfo = "none"
) |>
# add_trace(
#   data=earthquakes,
#   x=earthquakes$x,
#   y=earthquakes$y,
#   z=earthquakes$z,
#   mode = "markers", typeß = "scatter3d",
#   color = ~earthquakes$sig, size = 5,
#   text = paste("Description: ", earthquakes$title, "<br>", "Time: ", earthquakes$date_time),
#   hoverinfo = "text"
#) |>
add_surface(
data=rgb,
x = cos(degrees2radians(lon)) * cos(degrees2radians(lat)),
y = cos(degrees2radians(lat)) * sin(degrees2radians(lon)),
z = sin(degrees2radians(lat)),
surfacecolor = matrix(rgb$red, nrow = 360, ncol = 180, byrow=FALSE),
colorscale=colorscale
#showscale = FALSE, hoverinfo = "skip"
)
|>
globe <- plot_ly(height = 600) |>
add_sf(
data = sf::st_as_sf(maps::map("world", plot = FALSE, fill = TRUE)),
x = ~ 1.001 * cos(degrees2radians(x)) * cos(degrees2radians(y)),
y = ~ 1.001 * sin(degrees2radians(x)) * cos(degrees2radians(y)),
z = ~ 1.001 * sin(degrees2radians(y)),
color = I("black"), size = I(1)
#hoverinfo = "none"
) |>
# add_trace(
#   data=earthquakes,
#   x=earthquakes$x,
#   y=earthquakes$y,
#   z=earthquakes$z,
#   mode = "markers", typeß = "scatter3d",
#   color = ~earthquakes$sig, size = 5,
#   text = paste("Description: ", earthquakes$title, "<br>", "Time: ", earthquakes$date_time),
#   hoverinfo = "text"
#) |>
add_surface(
data=rgb,
x = cos(degrees2radians(lon)) * cos(degrees2radians(lat)),
y = cos(degrees2radians(lat)) * sin(degrees2radians(lon)),
z = sin(degrees2radians(lat)),
surfacecolor = matrix(rgb$red, nrow = 360, ncol = 180, byrow=FALSE),
colorscale=colorscale
#showscale = FALSE, hoverinfo = "skip"
)
browsable(globe)
nlat <- 360
nlon <- 180
lat <- seq(-180, 180, length.out = nlat)
lon <- seq(-90, 90, length.out = nlon)
lat <- matrix(rep(lat, nlon), nrow = nlat)
lon <- matrix(rep(lon, each = nlat), nrow = nlat)
globe <- plot_ly(height = 600) |>
add_sf(
data = sf::st_as_sf(maps::map("world", plot = FALSE, fill = TRUE)),
x = ~ 1.001 * cos(degrees2radians(x)) * cos(degrees2radians(y)),
y = ~ 1.001 * sin(degrees2radians(x)) * cos(degrees2radians(y)),
z = ~ 1.001 * sin(degrees2radians(y)),
color = I("black"), size = I(1)
#hoverinfo = "none"
) |>
# add_trace(
#   data=earthquakes,
#   x=earthquakes$x,
#   y=earthquakes$y,
#   z=earthquakes$z,
#   mode = "markers", typeß = "scatter3d",
#   color = ~earthquakes$sig, size = 5,
#   text = paste("Description: ", earthquakes$title, "<br>", "Time: ", earthquakes$date_time),
#   hoverinfo = "text"
#) |>
add_surface(
data=rgb,
x = cos(degrees2radians(lon)) * cos(degrees2radians(lat)),
y = cos(degrees2radians(lat)) * sin(degrees2radians(lon)),
z = sin(degrees2radians(lat)),
surfacecolor = matrix(rgb$red, nrow = 360, ncol = 180, byrow=FALSE),
colorscale=colorscale
#showscale = FALSE, hoverinfo = "skip"
)
browsable(globe)
library(plotly)
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
library(text)
library(text)
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
devtools::install_github("oscarkjell/text")
library(text)
library(reticulate)
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
text::textrpp_install()
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
text::textrpp_initialize(save_profile = TRUE)
reticulate::conda_list()
text::textrpp_initialize(save_profile = TRUE)
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
textEmbed("hello")
library(text)
text::textEmbed("hello")
install.packages("torch")
text::textEmbed("hello")
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
spacyr::spacy_install()
spacyr::spacy_install()
library(scipy)
install.packages("scipy")
# use scipy to read from netcdf file since R's ncdf4
# doesn't seem to know how to read it...
dat <- reticulate::py_run_file("test.py")
library(text)
detach("package:text", unload = TRUE)
remove.packages("text", lib="~/Library/R/arm64/4.4/library")
devtools::install_github("oscarkjell/text")
library(text)
