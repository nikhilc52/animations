) |>
layout(
title=list(text="<br><b>Greater Shearwater Migration</b>",font=list(family="Arial", size=48)),
showlegend = FALSE,
annotations=list(text=paste0("Day: ", dates[i] ,"<br>Nikhil Chinchalkar For Princeton University | LifeWatch INBO | 2024"),
showarrow=FALSE, font=list(family="Arial", size=28), y=0),
scene = list(
xaxis = empty_axis,
yaxis = empty_axis,
zaxis = empty_axis,
aspectratio = list(x = 1, y = 1, z = 1),
camera = list(eye=list(x=camera_x_positions[i]*2,y=camera_y_positions[i],z=camera_z_positions[i]))
)
)
orca(globe, paste0("image_sequence/",image_index,".png"), width = 7*200, height = 6*200)
image_index <- image_index + 1
}
)
View(rgb_earth)
system.time(
for(i in 1:length(dates)){
raw_tif <- read_stars(paste0("surfaces/", "001.png"),
RasterIO = list(nBufXSize=x_size, nBufYSize=y_size)) #"land_shallow_topo_2048.tif"
df_tif <- as.data.frame(raw_tif)
df_tif <- df_tif |>
mutate(x = x-180) |>
mutate(y = y-90)
red <- df_tif |>
filter(band == 1) |>
mutate(red = X001.png)
red <- red[-c(3,4)]
green <- df_tif |>
filter(band == 2) |>
mutate(green = X001.png)
green <- green[-c(3,4)]
blue <- df_tif |>
filter(band == 3) |>
mutate(blue = X001.png)
blue <- blue[-c(3,4)]
rgb <- left_join(left_join(red, green),blue)
rgb$color <- rgb(rgb$red/255,rgb$green/255,rgb$blue/255)
rgb$color_int <- bitwShiftL(rgb$red, 16) + bitwShiftL(rgb$green, 8) + rgb$blue
rgb_earth <- matrix(data=rgb$color_int, nrow=y_size, ncol = x_size, byrow=TRUE)
earth_colorscale <- distinct(data.frame(rgb$color_int, rgb$color))
earth_colorscale <- earth_colorscale |> arrange(rgb.color_int)
while(nrow(earth_colorscale) > 255){
toDelete <- seq(0, nrow(earth_colorscale), 2)
earth_colorscale <- earth_colorscale[toDelete, ]
rownames(earth_colorscale) = NULL
}
earth_colorscale$breaks <- seq(1:nrow(earth_colorscale))/nrow(earth_colorscale)
earth_colorscale$breaks[1] = 0
earth_colorscale <- earth_colorscale[,c(3,2)]
names(earth_colorscale)[names(earth_colorscale) == 'rgb.color'] <- 'colors'
print(paste("Date:",dates[i]))
print(paste("Frame #:", image_index))
curr_shearwaters <- shearwaters_full |>
filter(Time == dates[i])
globe <- curr_shearwaters |>
plot_ly(height = 600) |>
add_sf(
data = sf::st_as_sf(maps::map("world", plot = FALSE, fill = TRUE)),
x = ~ 1.001 * cos(degrees2radians(x)) * cos(degrees2radians(y)),
y = ~ 1.001 * sin(degrees2radians(x)) * cos(degrees2radians(y)),
z = ~ 1.001 * sin(degrees2radians(y)),
color = I("black"), size = I(1),
hoverinfo = "none"
) |>
add_trace(
data=shearwaters_full,
x=~curr_shearwaters$x,
y=~curr_shearwaters$y,
z=~curr_shearwaters$z,
mode = "markers", type = "scatter3d",
marker = list(size = 7),
text = paste("ID: ", curr_shearwaters$Animal, "<br>"),
hoverinfo = "text"
) |>
add_surface(
x = cos(degrees2radians(lon)) * cos(degrees2radians(lat)),
y = sin(degrees2radians(lon)) * cos(degrees2radians(lat)),
z = -sin(degrees2radians(lat)),
surfacecolor = rgb_earth,
colorscale=earth_colorscale,
showscale = FALSE, hoverinfo = "none",
lightposition = list(
x=1,
y=0,
z=0.6
),
contours = list(
x = list(highlight = FALSE),
y = list(highlight = FALSE),
z = list(highlight = FALSE)
)
) |>
layout(
title=list(text="<br><b>Greater Shearwater Migration</b>",font=list(family="Arial", size=48)),
showlegend = FALSE,
annotations=list(text=paste0("Day: ", dates[i] ,"<br>Nikhil Chinchalkar For Princeton University | LifeWatch INBO | 2024"),
showarrow=FALSE, font=list(family="Arial", size=28), y=0),
scene = list(
xaxis = empty_axis,
yaxis = empty_axis,
zaxis = empty_axis,
aspectratio = list(x = 1, y = 1, z = 1),
camera = list(eye=list(x=camera_x_positions[i]*2,y=camera_y_positions[i],z=camera_z_positions[i]))
)
)
orca(globe, paste0("image_sequence/",image_index,".png"), width = 7*200, height = 6*200)
image_index <- image_index + 1
}
)
camera_x_positions
camera_x_positions[30:35]
for(i in 1:5){
x <- seq(average_positions$average_x[1+(i-1)*length(average_positions$average_x)/5], average_positions$average_x[i*length(average_positions$average_x)/5], length.out=length(average_positions$average_x)/5)
y <- seq(average_positions$average_y[1+(i-1)*length(average_positions$average_y)/5], average_positions$average_y[i*length(average_positions$average_y)/5], length.out=length(average_positions$average_y)/5)
z <- seq(average_positions$average_z[1+(i-1)*length(average_positions$average_z)/5], average_positions$average_z[i*length(average_positions$average_z)/5], length.out=length(average_positions$average_z)/5)
camera_x_positions <- c(camera_x_positions, x)
camera_y_positions <- c(camera_y_positions, y)
camera_z_positions <- c(camera_z_positions, z)
}
camera_x_positions <- vector()
camera_y_positions <- vector()
camera_z_positions <- vector()
for(i in 1:5){
x <- seq(average_positions$average_x[1+(i-1)*length(average_positions$average_x)/5], average_positions$average_x[i*length(average_positions$average_x)/5], length.out=length(average_positions$average_x)/5)
y <- seq(average_positions$average_y[1+(i-1)*length(average_positions$average_y)/5], average_positions$average_y[i*length(average_positions$average_y)/5], length.out=length(average_positions$average_y)/5)
z <- seq(average_positions$average_z[1+(i-1)*length(average_positions$average_z)/5], average_positions$average_z[i*length(average_positions$average_z)/5], length.out=length(average_positions$average_z)/5)
camera_x_positions <- c(camera_x_positions, x)
camera_y_positions <- c(camera_y_positions, y)
camera_z_positions <- c(camera_z_positions, z)
}
camera_x_positions
camera_x_positions[13:17]
# Example data frame
set.seed(42)
df <- data.frame(
X = cumsum(rnorm(75, mean = 0, sd = 1)) + rnorm(75, mean = 0, sd = 2)
)
# Plot the original data
plot(df$X, type = "l", main = "Original Data", ylab = "X", xlab = "Index")
# Smoothing Splines
spline_fit <- smooth.spline(df$X, spar = 0.7) # Adjust spar for more/less smoothness
df$X_spline <- predict(spline_fit)$y
# LOESS
loess_fit <- loess(X ~ seq_along(X), data = df, span = 0.2) # Adjust span for more/less smoothness
df$X_loess <- predict(loess_fit)
# Gaussian Filter
if (!requireNamespace("signal", quietly = TRUE)) {
install.packages("signal")
}
library(signal)
sigma <- 2  # Standard deviation of the Gaussian kernel
kernel <- dnorm(-3*sigma:3*sigma, mean = 0, sd = sigma)
df$X_gaussian <- filter(df$X, kernel, sides = 2)
# Plot all smoothed data
par(mfrow = c(2, 2))
plot(df$X, type = "l", main = "Original Data", ylab = "X", xlab = "Index")
plot(df$X, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Index")
lines(df$X_spline, col = "red")
plot(df$X, type = "l", main = "LOESS Smoothing", ylab = "X", xlab = "Index")
lines(df$X_loess, col = "blue")
plot(df$X, type = "l", main = "Gaussian Filter Smoothing", ylab = "X", xlab = "Index")
lines(df$X_gaussian, col = "green")
View(average_positions)
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Plot all smoothed data
par(mfrow = c(3, 3))
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Smoothing Splines
spline_fit <- smooth.spline(average_positions$average_x, spar = 0.7) # Adjust spar for more/less smoothness
View(spline_fit)
plot(average_positions$average_x, type = "l", main = "Original Data", ylab = "X", xlab = "Index")
plot(df$X, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Index")
lines(df$X_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
lines(average_positions$average_x, col = "red")
average_positions$x_spline <- predict(spline_fit)$y
lines(average_positions$x_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
plot(df$X, type = "l", main = "LOESS Smoothing", ylab = "X", xlab = "Index")
lines(average_positions$x_spline, col = "red")
# Plot all smoothed data
par(mfrow = c(3, 3))
# Plot the original data
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Plot all smoothed data
par(mfrow = c(3, 3))
# Plot the original data
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Smoothing Splines
spline_fit <- smooth.spline(average_positions$average_x, spar = 0.7) # Adjust spar for more/less smoothness
spline_fit <- smooth.spline(average_positions$average_x, spar = 0.7) # Adjust spar for more/less smoothness
average_positions$x_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_y, spar = 0.7) # Adjust spar for more/less smoothness
average_positions$y_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_z, spar = 0.7) # Adjust spar for more/less smoothness
average_positions$z_spline <- predict(spline_fit)$y
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
lines(average_positions$x_spline, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Spline", ylab = "Y", xlab = "Time")
lines(average_positions$y_spline, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Spline", ylab = "Z", xlab = "Time")
lines(average_positions$z_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Regular", ylab = "X", xlab = "Time")
lines(camera_x_positions, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Regular", ylab = "Y", xlab = "Time")
lines(camera_y_positions, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Regular", ylab = "Z", xlab = "Time")
lines(camera_z_positions, col = "red")
# Plot the original data
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Smoothing Splines
spline_fit <- smooth.spline(average_positions$average_x, spar = 1) # Adjust spar for more/less smoothness
average_positions$x_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_y, spar = 1) # Adjust spar for more/less smoothness
average_positions$y_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_z, spar = 1) # Adjust spar for more/less smoothness
average_positions$z_spline <- predict(spline_fit)$y
# Plot all smoothed data
par(mfrow = c(3, 3))
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
lines(average_positions$x_spline, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Spline", ylab = "Y", xlab = "Time")
lines(average_positions$y_spline, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Spline", ylab = "Z", xlab = "Time")
lines(average_positions$z_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Regular", ylab = "X", xlab = "Time")
lines(camera_x_positions, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Regular", ylab = "Y", xlab = "Time")
lines(camera_y_positions, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Regular", ylab = "Z", xlab = "Time")
lines(camera_z_positions, col = "red")
# Plot the original data
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Smoothing Splines
spline_fit <- smooth.spline(average_positions$average_x, spar = .9) # Adjust spar for more/less smoothness
average_positions$x_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_y, spar = .9) # Adjust spar for more/less smoothness
average_positions$y_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_z, spar = .9) # Adjust spar for more/less smoothness
average_positions$z_spline <- predict(spline_fit)$y
# Plot all smoothed data
par(mfrow = c(3, 3))
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
lines(average_positions$x_spline, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Spline", ylab = "Y", xlab = "Time")
lines(average_positions$y_spline, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Spline", ylab = "Z", xlab = "Time")
lines(average_positions$z_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Regular", ylab = "X", xlab = "Time")
lines(camera_x_positions, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Regular", ylab = "Y", xlab = "Time")
lines(camera_y_positions, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Regular", ylab = "Z", xlab = "Time")
lines(camera_z_positions, col = "red")
# Plot the original data
plot(average_positions$average_x, type = "l", main = "Original Data (X)", ylab = "X", xlab = "Time")
plot(average_positions$average_y, type = "l", main = "Original Data (Y)", ylab = "Y", xlab = "Time")
plot(average_positions$average_z, type = "l", main = "Original Data (Z)", ylab = "Z", xlab = "Time")
# Smoothing Splines
spline_fit <- smooth.spline(average_positions$average_x, spar = .8) # Adjust spar for more/less smoothness
average_positions$x_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_y, spar = .8) # Adjust spar for more/less smoothness
average_positions$y_spline <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_z, spar = .8) # Adjust spar for more/less smoothness
average_positions$z_spline <- predict(spline_fit)$y
# Plot all smoothed data
par(mfrow = c(3, 3))
plot(average_positions$average_x, type = "l", main = "Smoothing Spline", ylab = "X", xlab = "Time")
lines(average_positions$x_spline, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Spline", ylab = "Y", xlab = "Time")
lines(average_positions$y_spline, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Spline", ylab = "Z", xlab = "Time")
lines(average_positions$z_spline, col = "red")
plot(average_positions$average_x, type = "l", main = "Smoothing Regular", ylab = "X", xlab = "Time")
lines(camera_x_positions, col = "red")
plot(average_positions$average_y, type = "l", main = "Smoothing Regular", ylab = "Y", xlab = "Time")
lines(camera_y_positions, col = "red")
plot(average_positions$average_z, type = "l", main = "Smoothing Regular", ylab = "Z", xlab = "Time")
lines(camera_z_positions, col = "red")
spline_fit <- smooth.spline(average_positions$average_x, spar = .8)
camera_x_positions <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_y, spar = .8)
camera_y_positions <- predict(spline_fit)$y
spline_fit <- smooth.spline(average_positions$average_z, spar = .8)
camera_z_positions <- predict(spline_fit)$y
###########
dates <- unique(shearwaters_full$Time)
image_index <- 1
system.time(
for(i in 1:length(dates)){
raw_tif <- read_stars(paste0("surfaces/", "001.png"),
RasterIO = list(nBufXSize=x_size, nBufYSize=y_size)) #"land_shallow_topo_2048.tif"
df_tif <- as.data.frame(raw_tif)
df_tif <- df_tif |>
mutate(x = x-180) |>
mutate(y = y-90)
red <- df_tif |>
filter(band == 1) |>
mutate(red = X001.png)
red <- red[-c(3,4)]
green <- df_tif |>
filter(band == 2) |>
mutate(green = X001.png)
green <- green[-c(3,4)]
blue <- df_tif |>
filter(band == 3) |>
mutate(blue = X001.png)
blue <- blue[-c(3,4)]
rgb <- left_join(left_join(red, green),blue)
rgb$color <- rgb(rgb$red/255,rgb$green/255,rgb$blue/255)
rgb$color_int <- bitwShiftL(rgb$red, 16) + bitwShiftL(rgb$green, 8) + rgb$blue
rgb_earth <- matrix(data=rgb$color_int, nrow=y_size, ncol = x_size, byrow=TRUE)
earth_colorscale <- distinct(data.frame(rgb$color_int, rgb$color))
earth_colorscale <- earth_colorscale |> arrange(rgb.color_int)
while(nrow(earth_colorscale) > 255){
toDelete <- seq(0, nrow(earth_colorscale), 2)
earth_colorscale <- earth_colorscale[toDelete, ]
rownames(earth_colorscale) = NULL
}
earth_colorscale$breaks <- seq(1:nrow(earth_colorscale))/nrow(earth_colorscale)
earth_colorscale$breaks[1] = 0
earth_colorscale <- earth_colorscale[,c(3,2)]
names(earth_colorscale)[names(earth_colorscale) == 'rgb.color'] <- 'colors'
print(paste("Date:",dates[i]))
print(paste("Frame #:", image_index))
curr_shearwaters <- shearwaters_full |>
filter(Time == dates[i])
globe <- curr_shearwaters |>
plot_ly(height = 600) |>
add_sf(
data = sf::st_as_sf(maps::map("world", plot = FALSE, fill = TRUE)),
x = ~ 1.001 * cos(degrees2radians(x)) * cos(degrees2radians(y)),
y = ~ 1.001 * sin(degrees2radians(x)) * cos(degrees2radians(y)),
z = ~ 1.001 * sin(degrees2radians(y)),
color = I("black"), size = I(1),
hoverinfo = "none"
) |>
add_trace(
data=shearwaters_full,
x=~curr_shearwaters$x,
y=~curr_shearwaters$y,
z=~curr_shearwaters$z,
mode = "markers", type = "scatter3d",
marker = list(size = 7),
text = paste("ID: ", curr_shearwaters$Animal, "<br>"),
hoverinfo = "text"
) |>
add_surface(
x = cos(degrees2radians(lon)) * cos(degrees2radians(lat)),
y = sin(degrees2radians(lon)) * cos(degrees2radians(lat)),
z = -sin(degrees2radians(lat)),
surfacecolor = rgb_earth,
colorscale=earth_colorscale,
showscale = FALSE, hoverinfo = "none",
lightposition = list(
x=1,
y=0,
z=0.6
),
contours = list(
x = list(highlight = FALSE),
y = list(highlight = FALSE),
z = list(highlight = FALSE)
)
) |>
layout(
title=list(text="<br><b>Greater Shearwater Migration</b>",font=list(family="Arial", size=48)),
showlegend = FALSE,
annotations=list(text=paste0("Day: ", dates[i] ,"<br>Nikhil Chinchalkar For Princeton University | LifeWatch INBO | 2024"),
showarrow=FALSE, font=list(family="Arial", size=28), y=0),
scene = list(
xaxis = empty_axis,
yaxis = empty_axis,
zaxis = empty_axis,
aspectratio = list(x = 1, y = 1, z = 1),
camera = list(eye=list(x=camera_x_positions[i]*2,y=camera_y_positions[i],z=camera_z_positions[i]))
)
)
orca(globe, paste0("image_sequence/",image_index,".png"), width = 7*200, height = 6*200)
image_index <- image_index + 1
}
)
library(plotly)
library(dplyr)
library(stars)
library(tidyr)
library(lubridate)
degrees2radians <- function(degree) degree * pi / 180
shearwaters <- read.csv("occurrence.csv")
shearwaters <- shearwaters[,names(shearwaters) %in% c("organismID", "verbatimEventDate", "decimalLatitude","decimalLongitude")]
shearwaters <- shearwaters |>
mutate(x=1.01 * cos(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(y=1.01 * sin(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(z=1.01 * sin(degrees2radians(decimalLatitude)))
shearwaters <- shearwaters |>
separate_rows(organismID, sep=";") |>
mutate(date = as.POSIXct(verbatimEventDate))
time_range <- seq(
from = as.Date(min(shearwaters$date)),
to = as.Date(max(shearwaters$date)),
by = "day"
)
animals <- unique(shearwaters$organismID)
full_times <- expand.grid(Animal = animals, Time = time_range)
shearwaters_full <- full_times |>
left_join(shearwaters, by = c("Animal" = "organismID"))  |>
group_by(Animal, Time) |>
filter(abs(difftime(Time, date, units = "secs")) == min(abs(difftime(Time, date, units = "secs")))) |>
filter(abs(difftime(Time, date, units = "days")) < 1) |>
ungroup() |>
arrange(Time, Animal) |>
select(Animal, Time, date, decimalLatitude, decimalLongitude, x, y, z) |>
group_by(Time) |>
filter(n() > 5) |>
filter(Time >= as.Date("2010-01-01"))
library(plotly)
library(dplyr)
library(stars)
library(tidyr)
library(lubridate)
degrees2radians <- function(degree) degree * pi / 180
shearwaters <- read.csv("occurrence.csv")
shearwaters <- shearwaters[,names(shearwaters) %in% c("organismID", "verbatimEventDate", "decimalLatitude","decimalLongitude")]
shearwaters <- shearwaters |>
mutate(x=1.01 * cos(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(y=1.01 * sin(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(z=1.01 * sin(degrees2radians(decimalLatitude)))
shearwaters <- shearwaters |>
separate_rows(organismID, sep=";") |>
mutate(date = as.POSIXct(verbatimEventDate))
time_range <- seq(
from = as.Date(min(shearwaters$date)),
to = as.Date(max(shearwaters$date)),
by = "day"
)
animals <- unique(shearwaters$organismID)
full_times <- expand.grid(Animal = animals, Time = time_range)
shearwaters_full <- full_times |>
left_join(shearwaters, by = c("Animal" = "organismID"))  |>
group_by(Animal, Time) |>
filter(abs(difftime(Time, date, units = "secs")) == min(abs(difftime(Time, date, units = "secs")))) |>
filter(abs(difftime(Time, date, units = "days")) < 1) |>
ungroup() |>
arrange(Time, Animal) |>
select(Animal, Time, date, decimalLatitude, decimalLongitude, x, y, z) |>
group_by(Time) |>
filter(n() > 5) |>
filter(Time >= as.Date("2010-01-01"))
shearwaters <- shearwaters[,names(shearwaters) %in% c("organismID", "verbatimEventDate", "decimalLatitude","decimalLongitude")]
shearwaters <- shearwaters |>
mutate(x=1.01 * cos(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(y=1.01 * sin(degrees2radians(decimalLongitude)) * cos(degrees2radians(decimalLatitude))) |>
mutate(z=1.01 * sin(degrees2radians(decimalLatitude)))
shearwaters <- shearwaters |>
separate_rows(organismID, sep=";") |>
mutate(date = as.POSIXct(verbatimEventDate))
time_range <- seq(
from = as.Date(min(shearwaters$date)),
to = as.Date(max(shearwaters$date)),
by = "day"
)
animals <- unique(shearwaters$organismID)
full_times <- expand.grid(Animal = animals, Time = time_range)
shearwaters_full <- full_times |>
left_join(shearwaters, by = c("Animal" = "organismID"))  |>
group_by(Animal, Time) |>
filter(abs(difftime(Time, date, units = "secs")) == min(abs(difftime(Time, date, units = "secs")))) |>
filter(abs(difftime(Time, date, units = "days")) < 1) |>
ungroup() |>
arrange(Time, Animal) |>
select(Animal, Time, date, decimalLatitude, decimalLongitude, x, y, z) |>
group_by(Time) |>
filter(n() > 5) |>
filter(Time >= as.Date("2010-01-01"))
shearwaters_full <- full_times |>
left_join(shearwaters, by = c("Animal" = "organismID"))  |>
group_by(Animal, Time) |>
filter(abs(difftime(Time, date, units = "secs")) == min(abs(difftime(Time, date, units = "secs")))) |>
filter(abs(difftime(Time, date, units = "days")) < 1) |>
ungroup() |>
arrange(Time, Animal) |>
select(Animal, Time, date, decimalLatitude, decimalLongitude, x, y, z) |>
group_by(Time) |>
filter(n() > 5) |>
filter(Time >= as.Date("2010-01-01"))
shearwaters_full <- full_times |>
left_join(shearwaters, by = c("Animal" = "organismID"))  |>
group_by(Animal, Time) |>
filter(abs(difftime(Time, date, units = "secs")) == min(abs(difftime(Time, date, units = "secs")))) |>
filter(abs(difftime(Time, date, units = "days")) < 1) |>
ungroup() |>
arrange(Time, Animal) |>
select(Animal, Time, date, decimalLatitude, decimalLongitude, x, y, z) |>
group_by(Time) |>
filter(n() > 5) |>
filter(Time >= as.Date("2010-01-01"))
