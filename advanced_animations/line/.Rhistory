}
system.time(combined_year_log(as.Date("2007-01-01")))
year_log <- function(date, index){
print(date)
plot <- ggplot(word_count_one)+
table_axis(date)+
#table_titles(date)+
geom_text(x=year(date),y=12-month(date), label=word_count_one$Words[which(word_count_one$Year_Month == floor_date(date, "month"))], fontface="plain")+
xlim(2005,2023)+
ylim(-1,13)+
theme_void()
ggsave(plot=plot, file=paste0("image_sequence1/",formatC(index, width = 3, format = "d", flag = "0"),".png"), width=15, height=7, units="in",dpi=150)
}
table_axis <- function(date){
label <- geom_text(y=0,x=0,label="")
if (year(date) == 2007){
label <- geom_text(y=12-month(date),x=2006,label=months(date), fontface="bold", color="gray")
}
if(month(date) == 1){
label <- c(label,geom_text(y=12, x=year(date), label=year(date), fontface="bold", color="gray"))
}
return(label)
}
table_titles <- function(date){
if(date == as.Date("2007-01-01")){
return(geom_text(y=13, x=2014.5, label="Most-Used Word In NYT Headlines Each Month", fontface="bold", color="black", size=8))
}
}
combined_year_log <- function(start_date){
end_date <- as.Date("2022-12-01")
curr_date <- start_date
index <- 0
while(curr_date <= end_date){
year_log(curr_date, index)
index <- index + 1
curr_date <- curr_date %m+% months(1)
}
}
system.time(combined_year_log(as.Date("2007-01-01")))
?list.files
?image_write
magick::image_write(new_gif, path = "final.gif", format = "gif", delay=1/3)
new_gif <- magick::image_animate(new_gif, fps=3)
new_gif <- magick::image_animate(new_gif, delay=1/3)
magick::image_write(new_gif, path = "final2.gif", format = "gif")
new_gif <- magick::image_animate(new_gif, delay=.5)
magick::image_write(new_gif, path = "final2.gif", format = "gif")
new_gif <- magick::image_animate(new_gif, fps=4)
magick::image_write(new_gif, path = "final2.gif", format = "gif")
library(tidyverse)
library(dplyr)
library(gganimate)
library(ggwordcloud)
library(stopwords)
library(tokenizers)
library(ggplot2)
headlines <- read_csv("headlines.csv")
nyt_headlines <- headlines |>
filter(Publication == "New York Times")
nyt_headlines$Date <- as.Date(as.character(nyt_headlines$Date), format="%Y%m%d")
nyt_headlines <- nyt_headlines |>
filter(!is.na(Headline)) |>
mutate(Year_Month = as.Date(paste0(format(Date, "%Y"), format(Date, "%m"), "01"), format="%Y%m%d")) |>
filter(Year_Month < "2023-01-01")
nyt_headlines <- nyt_headlines |>
group_by(Year_Month) |>
summarize(
Headlines = paste(Headline, collapse = " "),
Words = unlist(tokenize_words(Headlines, stopwords = stopwords("en")))
)
nyt_headlines <- nyt_headlines[-2]
word_count <- nyt_headlines |>
group_by(Words, Year_Month) |>
summarize(
count = n()
)
word_count_five <- word_count |>
filter(!(tolower(Words) %in% c("new", "york", "times", "nyt"))) |>
filter(!(tolower(Words) %in% c("min", "read", "review", "editorial", "now",
"comments", "getty", "images", "theater",
"movie", "slide", "show", "television", "books",
"op","ed"))) |>
filter(!grepl("[^A-Za-z0-9 ]", Words)) |>
filter(!(Words == "")) |>
filter(nchar(Words) > 1) |>
group_by(Year_Month) |>
arrange(desc(count)) |>
slice_head(n = 5)
set.seed(52)
word_cloud <- word_count_five |>
ggplot()+
geom_text_wordcloud(aes(label=Words, size=count))+
theme_minimal()+
scale_size_area(max_size = 20)+
transition_time(Year_Month)+
labs(subtitle = "{paste(month.name[as.numeric(format(as.Date(frame_time),\"%m\"))],
format(as.Date(frame_time),\"%Y\"))}",
title = "5 Most-Used Words In NYT Headlines Each Month (2007-2022)")+
theme(plot.title = ggtext::element_markdown(size=16, hjust=0.5, face="bold"),
plot.subtitle = ggtext::element_markdown(size=20, hjust=0.5), face="bold")
mgif_word_cloud <- magick::image_read(animate(word_cloud, fps = 4, duration = 48, height = 7,
width = 7, units = "in", res = 150))
word_count_one <- word_count |>
filter(!(tolower(Words) %in% c("new", "york", "times", "nyt"))) |>
filter(!(tolower(Words) %in% c("min", "read", "review", "editorial", "now",
"comments", "getty", "images", "theater",
"movie", "slide", "show", "television", "books",
"op","ed"))) |>
filter(!grepl("[^A-Za-z0-9 ]", Words)) |>
filter(!(Words == "")) |>
filter(nchar(Words) > 1) |>
group_by(Year_Month) |>
arrange(desc(count)) |>
slice_head(n = 1)
year_log <- function(date, index){
print(date)
plot <- ggplot(word_count_one)+
table_axis(date)+
table_titles(date)+
geom_text(x=year(date),y=12-month(date), label=word_count_one$Words[which(word_count_one$Year_Month == floor_date(date, "month"))], fontface="plain")+
xlim(2005,2023)+
ylim(-1,13)+
theme_void()
ggsave(plot=plot, file=paste0("image_sequence1/",formatC(index, width = 3, format = "d", flag = "0"),".png"), width=15, height=7, units="in",dpi=150)
}
table_axis <- function(date){
label <- geom_text(y=0,x=0,label="")
if (year(date) == 2007){
label <- geom_text(y=12-month(date),x=2006,label=months(date), fontface="bold", color="gray")
}
if(month(date) == 1){
label <- c(label,geom_text(y=12, x=year(date), label=year(date), fontface="bold", color="gray"))
}
return(label)
}
table_titles <- function(date){
if(date == as.Date("2007-01-01")){
return(geom_text(y=13, x=2014.5, label="Most-Used Word In NYT Headlines Each Month", fontface="bold", color="black", size=8))
}
}
combined_year_log <- function(start_date){
end_date <- as.Date("2022-12-01")
curr_date <- start_date
index <- 0
while(curr_date <= end_date){
year_log(curr_date, index)
index <- index + 1
curr_date <- curr_date %m+% months(1)
}
}
system.time(combined_year_log(as.Date("2007-01-01")))
png_files <- sort(list.files("image_sequence1", pattern = ".*png$", full.names = TRUE))
gifski::gifski(png_files, gif_file = "animation1.gif", width = 15*150, height = 7*150, delay = 1)
mgif_word_log <- magick::image_read("animation1.gif")
new_gif <- magick::image_append(c(mgif_word_cloud[1], mgif_word_log[1]))
for(i in 2:192){
combined <- magick::image_append(c(mgif_word_cloud[i], mgif_word_log[i]))
new_gif <- c(new_gif, combined)
}
for(x in 1:30){
combined <- magick::image_append(c(mgif_word_cloud[192], mgif_word_log[192]))
new_gif <- c(new_gif, combined)
}
start <- Sys.time()
new_gif <- magick::image_animate(new_gif, fps=4)
magick::image_write(new_gif, path = "final1.gif", format = "gif")
end <- Sys.time()
library(tidyverse)
library(dplyr)
library(gganimate)
library(ggwordcloud)
library(stopwords)
library(tokenizers)
library(ggplot2)
headlines <- read_csv("headlines.csv")
nyt_headlines <- headlines |>
filter(Publication == "New York Times")
nyt_headlines$Date <- as.Date(as.character(nyt_headlines$Date), format="%Y%m%d")
nyt_headlines <- nyt_headlines |>
filter(!is.na(Headline)) |>
mutate(Year_Month = as.Date(paste0(format(Date, "%Y"), format(Date, "%m"), "01"), format="%Y%m%d")) |>
filter(Year_Month < "2023-01-01")
nyt_headlines <- nyt_headlines |>
group_by(Year_Month) |>
summarize(
Headlines = paste(Headline, collapse = " "),
Words = unlist(tokenize_words(Headlines, stopwords = stopwords("en")))
)
nyt_headlines <- nyt_headlines[-2]
word_count <- nyt_headlines |>
group_by(Words, Year_Month) |>
summarize(
count = n()
)
word_count_five <- word_count |>
filter(!(tolower(Words) %in% c("new", "york", "times", "nyt"))) |>
filter(!(tolower(Words) %in% c("min", "read", "review", "editorial", "now",
"comments", "getty", "images", "theater",
"movie", "slide", "show", "television", "books",
"op","ed"))) |>
filter(!grepl("[^A-Za-z0-9 ]", Words)) |>
filter(!(Words == "")) |>
filter(nchar(Words) > 1) |>
group_by(Year_Month) |>
arrange(desc(count)) |>
slice_head(n = 5)
word_count_one <- word_count |>
filter(!(tolower(Words) %in% c("new", "york", "times", "nyt"))) |>
filter(!(tolower(Words) %in% c("min", "read", "review", "editorial", "now",
"comments", "getty", "images", "theater",
"movie", "slide", "show", "television", "books",
"op","ed"))) |>
filter(!grepl("[^A-Za-z0-9 ]", Words)) |>
filter(!(Words == "")) |>
filter(nchar(Words) > 1) |>
group_by(Year_Month) |>
arrange(desc(count)) |>
slice_head(n = 1)
set.seed(52)
word_cloud <- word_count_five |>
ggplot(aes(label=Words, size=count))+
geom_text_wordcloud()+
theme_minimal()+
scale_size_area(max_size = 20)+
transition_time(Year_Month)+
labs(subtitle = "{paste(month.name[as.numeric(format(as.Date(frame_time),\"%m\"))],
format(as.Date(frame_time),\"%Y\"))}",
title = "5 Most-Used Words In NYT Headlines Each Month (2007-2022)",
caption="Nikhil Chinchalkar for Princeton University | New York Times | 2024")+
theme(plot.title = ggtext::element_markdown(size=16, hjust=0.5, face="bold"),
plot.subtitle = ggtext::element_markdown(size=20, hjust=0.5), face="bold")
word_count_one$Year_Month <- as.Date(word_count_one$Year_Month)
year_log <- function(date, index){
print(date)
plot <- ggplot(word_count_one)+
table_axis(date)+
table_titles(date)+
geom_text(x=year(date),y=12-month(date), label=word_count_one$Words[which(word_count_one$Year_Month == floor_date(date, "month"))], fontface="plain")+
xlim(2005,2023)+
ylim(-1,13)+
theme_void()
ggsave(plot=plot, file=paste0("image_sequence/",formatC(index, width = 3, format = "d", flag = "0"),".png"), width=15, height=7, units="in",dpi=150)
}
table_axis <- function(date){
label <- geom_text(y=0,x=0,label="")
if (year(date) == 2007){
label <- geom_text(y=12-month(date),x=2006,label=months(date), fontface="bold", color="gray")
}
if(month(date) == 1){
if(year(date) == 2007){
label <- c(label,geom_text(y=12, x=year(date), label=year(date), fontface="bold", color="gray"))
}
else{
label <- geom_text(y=12, x=year(date), label=year(date), fontface="bold", color="gray")
}
}
return(label)
}
table_titles <- function(date){
if(date == as.Date("2007-01-01")){
return(geom_text(y=13, x=2014.5, label="Most-Used Word In NYT Headlines Each Month", fontface="bold", color="black", size=8))
}
}
combined_year_log <- function(start_date){
end_date <- as.Date("2022-12-01")
curr_date <- start_date
index <- 0
while(curr_date <= end_date){
year_log(curr_date, index)
index <- index + 1
curr_date <- curr_date %m+% months(1)
}
}
system.time(combined_year_log(as.Date("2007-01-01")))
png_files <- sort(list.files("image_sequence", pattern = ".*png$", full.names = TRUE))
gifski::gifski(png_files, gif_file = "animation.gif", width = 1500*1.5, height = 700*1.5, delay = 1)
mgif_word_log <- magick::image_read("animation.gif")
mgif_word_cloud <- magick::image_read(animate(word_cloud, fps = 4, duration = 48, height = 7,
width = 7, units = "in", res = 150))
new_gif <- magick::image_append(c(mgif_word_cloud[1], mgif_word_log[1]))
for(i in 2:192){
combined <- magick::image_append(c(mgif_word_cloud[i], mgif_word_log[i]))
new_gif <- c(new_gif, combined)
}
for(x in 1:30){
combined <- magick::image_append(c(mgif_word_cloud[192], mgif_word_log[192]))
new_gif <- c(new_gif, combined)
}
start <- Sys.time()
magick::image_write(new_gif, path = "final.gif", format = "gif")
end <- Sys.time()
png_files <- sort(list.files("image_sequence1", pattern = ".*png$", full.names = TRUE))
gifski::gifski(png_files, gif_file = "animation1.gif", width = 15*150, height = 7*150, delay = 1)
mgif_word_log <- magick::image_read("animation1.gif")
new_gif <- magick::image_append(c(mgif_word_cloud[1], mgif_word_log[1]))
for(i in 2:192){
combined <- magick::image_append(c(mgif_word_cloud[i], mgif_word_log[i]))
new_gif <- c(new_gif, combined)
}
for(x in 1:30){
combined <- magick::image_append(c(mgif_word_cloud[192], mgif_word_log[192]))
new_gif <- c(new_gif, combined)
}
start <- Sys.time()
#new_gif <- magick::image_animate(new_gif, fps=4)
magick::image_write(new_gif, path = "final1.gif", format = "gif")
end <- Sys.time()
new_gif <- image_read("final1.gif")
new_gif <- magick::image_read("final1.gif")
new_gif <- magick::image_animate(new_gif, fps = 3)
new_gif <- magick::image_animate(new_gif, fps = 4)
magick::image_write(new_gif, path = "final1.gif", format = "gif")
system.time(
new_gif <- magick::image_read("final1.gif")
new_gif <- magick::image_animate(new_gif, fps = 4)
start <- Sys.time()
new_gif <- magick::image_read("final1.gif")
new_gif <- magick::image_animate(new_gif, fps = 4)
magick::image_write(new_gif, path = "final1.gif", format = "gif")
end <- Sys.time()
print('test')
library(tidyverse)
library(readxl)
library(gganimate)
world <- read_excel("covid.xlsx")
setwd("~/Documents/GitHub/animations/advanced_animations/line")
detach("package:tidyverse", unload = TRUE)
library(readxl)
library(gganimate)
world <- read_excel("covid.xlsx")
View(world)
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01")
world <- read_excel("covid.xlsx")
world$date <- as.Date(world$date)
View(world)
class(world$date)
world <- read_excel("covid.xlsx")
class(world$date)
world$date <- as.Date(world$date)
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01")
View(world)
world['label1'] = "First U.S. Death"
world['label2'] = "CDC Mask Recommendation"
world['label3'] = "Vaccines Released in the U.S."
world['label4'] = "FDA Authorizes Booster Shots"
world['label5'] = "WHO Declares Omnicron Variant of Concern"
add_annotation <- function(text, date, label_number){
world[paste0('label',label_number)] = text
world <- mutate('test' = 5)
}
add_annotation('1','2','3')
add_annotation <- function(text, date, label_number){
world[paste0('label',label_number)] = text
world <- mutate(test = 5)
}
add_annotation('1','2','3')
world <- world |> mutate(test = 5)
add_annotation <- function(text, date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(test = 5)
}
world <- read_excel("covid.xlsx")
world$date <- as.Date(world$date)
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01")
add_annotation <- function(text, date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(test = 5)
}
add_annotation('1','2',)
add_annotation('1','2','3')
View(world)
world <- read_excel("covid.xlsx")
world$date <- as.Date(world$date)
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01")
add_annotation <- function(text, date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(uniquenamehere = 5)
}
add_annotation <- function(text, occurence_date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(uniquenamehere = ifelse(date >= occurence_date), 1, 0.1))
add_annotation <- function(text, occurence_date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(uniquenamehere = ifelse(date >= occurence_date), 1, 0.1)
}
add_annotation('string',as.Date('2020-02-06'),1)
add_annotation <- function(text, occurence_date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(uniquenamehere = ifelse(date >= as.Date(occurence_date), 1, 0.1))
}
add_annotation('string','2020-02-06',1)
View(world)
world['label1'] = "First U.S. Death"
world[paste0('label',label_number)] = text
text <- "string"
occurence_date <- '2020-02-01'
label_number <- 1
add_annotation <- function(text, occurence_date, label_number){
world[paste0('label',label_number)] = text
world <- world |> mutate(uniquenamehere = ifelse(date >= as.Date(occurence_date), 1, 0.1))
}
world[paste0('label',label_number)] = text
world[paste0('label',label_number)] = text
world[paste0('label',label_number)] = text
world[paste0('label',label_number)] = text
world['paste0'] = text
paste0('label',label_number)
world[paste0('label',1)] = "First U.S. Death"
world[paste0('label',1)] = "First U.S. Death"
world[paste0('label',1)] = "First U.S. Death"
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01") |>
select(date, new_deaths)
View(world)
?select
?drop
world <- world |> drop(date)
world[length(world)+1] = text
View(world)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[lenght(world)+1] = ifelse(date >= as.Date(occurence_date), 1, 0.1)
}
View(world)
text <- "string"
occurence_date <- '2020-02-01'
label_number <- 1
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[lenght(world)+1] = ifelse(date >= as.Date(occurence_date), 1, 0.1)
}
add_annotation(text, occurence_date, label_number)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[lenght(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
}
add_annotation(text, occurence_date, label_number)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
}
add_annotation(text, occurence_date, label_number)
View(world)
world[length(world)+1] = text
View(world)
names(world)[length(world)] <- paste0('label',label_number)
View(world)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
names(world)[length(world)] <- paste0('label',label_number,'alpha')
}
add_annotation('string','2020-02-01',1)
View(world)
world <- read_excel("covid.xlsx")
world$date <- as.Date(world$date)
world <- world |>
filter(location=="World") |>
filter(!is.na(total_cases)) |>
filter(date < "2023-01-01") |>
select(date, new_deaths)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
names(world)[length(world)] <- paste0('label',label_number,'alpha')
}
add_annotation('string','2020-02-01',1)
View(world)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
print(text)
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
names(world)[length(world)] <- paste0('label',label_number,'alpha')
}
add_annotation('string','2020-02-01',1)
world[length(world)+1] = text
View(add_annotation)
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] = text
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] = ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
names(world)[length(world)] <- paste0('label',label_number,'alpha')
}
add_annotation <- function(text, occurence_date, label_number){
world[length(world)+1] <-  text
names(world)[length(world)] <- paste0('label',label_number)
world[length(world)+1] <-  ifelse(world$date >= as.Date(occurence_date), 1, 0.1)
names(world)[length(world)] <- paste0('label',label_number,'alpha')
}
add_annotation('string','2020-02-01',1)
